<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义namespace，说明要实现那个Mapper里面的方法-->
<mapper namespace="com.fruit.dao.ItemOrderMapper">

    <!-- 定义实体类与数据库映射字段的关系 -->
    <resultMap id="ResultMapItemOrder" type="com.fruit.po.ItemOrder">
        <!-- 主键字段 -->
        <id property="id" column="id" jdbcType="INTEGER"></id>
        <!-- 非主键字段 -->
        <result property="itemId" column="item_id" jdbcType="INTEGER"></result>
        <result property="userId" column="user_id" jdbcType="INTEGER"></result>
        <result property="code" column="code" jdbcType="VARCHAR"></result>
        <result property="addTime" column="addTime" jdbcType="TIMESTAMP"></result>
        <result property="total" column="total" jdbcType="VARCHAR"></result>
        <result property="isDelete" column="isDelete" jdbcType="INTEGER"></result>
        <result property="status" column="status" jdbcType="INTEGER"></result>
    </resultMap>

    <resultMap id="ResultMapItemOrderDto" type="com.fruit.po.ItemOrder">
        <!-- 主键字段 -->
        <id property="id" column="id" jdbcType="INTEGER"></id>
        <!-- 非主键字段 -->
        <result property="itemId" column="item_id" jdbcType="INTEGER"></result>
        <result property="userId" column="user_id" jdbcType="INTEGER"></result>
        <result property="code" column="code" jdbcType="VARCHAR"></result>
        <result property="addTime" column="addTime" jdbcType="TIMESTAMP"></result>
        <result property="total" column="total" jdbcType="VARCHAR"></result>
        <result property="isDelete" column="isDelete" jdbcType="INTEGER"></result>
        <result property="status" column="status" jdbcType="INTEGER"></result>

        <association property="user" column="user_id" select="com.fruit.dao.UserMapper.load"></association>
        <collection property="details" column="id" ofType="com.fruit.po.OrderDetail" select="com.fruit.dao.OrderDetailMapper.listByOrderId"></collection>
    </resultMap>

    <!-- 声明数据库字段（公共的字段） -->
    <sql id="ItemOrder_field">
        id,item_id,user_id,code,addTime,total,isDelete,status
    </sql>

    <!-- 实体类的属性（公共的字段） -->
    <sql id="ItemOrder_insert">
        #{id},#{itemId},#{userId},#{code},#{addTime},#{total},#{isDelete},#{status}
    </sql>

    <!-- 更新时的条件（公共的字段） -->
    <sql id="ItemOrder_update">
        <if test="itemId != null">
            item_id = #{itemId},
        </if>
        <if test="userId != null">
            user_id = #{userId},
        </if>
        <if test="code != null">
            code = #{code},
        </if>
        <if test="addTime != null">
            addTime = #{addTime},
        </if>
        <if test="total != null">
            total = #{total},
        </if>
        <if test="isDelete != null">
            isDelete = #{isDelete},
        </if>
        <if test="status != null">
            status = #{status}
        </if>
    </sql>

    <!-- 查询时的条件（公共的字段） -->
    <sql id="ItemOrder_where">
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="itemId != null">
            and item_id = #{itemId}
        </if>
        <if test="userId != null">
            and user_id = #{userId}
        </if>
        <if test="code != null">
            and code = #{code}
        </if>
        <if test="addTime != null">
            and addTime = #{addTime}
        </if>
        <if test="total != null">
            and total = #{total}
        </if>
        <if test="isDelete != null">
            and isDelete = #{isDelete}
        </if>
        <if test="status != null">
            and status = #{status}
        </if>
    </sql>

    <!-- 新增
         参数: 实体类
         返回： 主键-->
    <insert id="insert" parameterType="com.fruit.po.ItemOrder" useGeneratedKeys="true" keyProperty="id">
        insert into item_order(
        <include refid="ItemOrder_field"></include>
        ) values(
        <include refid="ItemOrder_insert"></include>
        )
    </insert>

    <!-- 根据实体主键删除一个实体 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from item_order where id=#{id}
    </delete>

    <!-- 通过实体删除 -->
    <delete id="deleteByEntity" parameterType="com.fruit.po.ItemOrder">
        delete from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </delete>

    <!-- 通过Map删除 -->
    <delete id="deleteByMap" parameterType="java.util.HashMap">
        delete from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </delete>

    <!-- 更新一个实体 -->
    <update id="update" parameterType="com.fruit.po.ItemOrder">
        update item_order
        <set>
            <include refid="ItemOrder_update"></include>
        </set>
        where 1=1
            <include refid="ItemOrder_where"></include>
    </update>

    <!-- 通过id进行修改 -->
    <update id="updateById" parameterType="com.fruit.po.ItemOrder">
        update item_order
        <set>
            <include refid="ItemOrder_update"></include>
        </set>
        where id=#{id}
    </update>

    <!-- 根据参数查询 -->
    <select id="listByMap" resultMap="ResultMapItemOrder" parameterType="map">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!-- 查询整个表 -->
    <select id="listAll" resultMap="ResultMapItemOrder">
        select <include refid="ItemOrder_field"></include>
        from item_order
    </select>

    <!-- 查询所有实体，根据实体属性值为判断条件查询所有实体 -->
    <select id="listAllByEntity" resultMap="ResultMapItemOrder" parameterType="com.fruit.po.ItemOrder">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!-- 根据主键获取一个实体 -->
    <select id="load" resultMap="ResultMapItemOrder" parameterType="java.lang.Integer">
        select <include refid="ItemOrder_field"></include>
        from item_order where id=#{id}
    </select>

    <!-- 根据主键获取一个实体 -->
    <select id="getById" resultMap="ResultMapItemOrder" parameterType="java.lang.Integer">
        select <include refid="ItemOrder_field"></include>
        from item_order where id=#{id}
    </select>

    <!-- 通过map查询 -->
    <select id="getByMap" resultMap="ResultMapItemOrder" parameterType="map">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!--通过对象查询分页 -->
    <select id="getByEntity" resultMap="ResultMapItemOrder" parameterType="com.fruit.po.ItemOrder">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!-- 通过map查询分页 -->
    <select id="findByMap" resultMap="ResultMapItemOrder" parameterType="map">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!--通过对象查询分页 -->
    <select id="findByEntity" resultMap="ResultMapItemOrder" parameterType="com.fruit.po.ItemOrder">
        select <include refid="ItemOrder_field"></include>
        from item_order where 1=1
        <include refid="ItemOrder_where"></include>
    </select>

    <!-- 批量新增 -->
    <insert id="insertBatch" parameterType="java.util.List">
        insert into item_order(
        <include refid="ItemOrder_field"></include>
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.itemId},#{item.userId},#{item.code},#{item.addTime},#{item.total},#{item.isDelete},#{item.status})
        </foreach>
    </insert>

    <!-- 批量修改 -->
    <update id="updateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator=";">
            update item_order
            <set>
                <if test="item.itemId != null">
                    item_id = #{item.itemId},
                </if>
                <if test="item.userId != null">
                    user_id = #{item.userId},
                </if>
                <if test="item.code != null">
                    code = #{item.code},
                </if>
                <if test="item.addTime != null">
                    addTime = #{item.addTime},
                </if>
                <if test="item.total != null">
                    total = #{item.total},
                </if>
                <if test="item.isDelete != null">
                    isDelete = #{item.isDelete},
                </if>
                <if test="item.status != null">
                    status = #{item.status}
                </if>
            </set>
            where 1=1
            <if test="item.id != null">
                and id = #{item.id}
            </if>
        </foreach>
    </update>

    <!-- ==================封装纯sql语法==================== -->
    <!-- 查询一个对象，返回map -->
    <select id="getBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询一个对象返回一个实体类 -->
    <select id="getBySqlReturnEntity" resultMap="ResultMapItemOrder">
        ${sql}
    </select>

    <!-- 查询列表返回map -->
    <select id="listBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询列表返回实体 -->
    <select id="listBySqlReturnEntity" resultMap="ResultMapItemOrderDto">
        ${sql}
    </select>

    <!-- 查询分页 -->
    <select id="findBySqlRerturnEntity" resultMap="ResultMapItemOrderDto">
        ${sql}
    </select>

    <!-- 通过SQL修改 -->
    <update id="updateBysql">
        ${sql}
    </update>

    <!-- 通过SQL删除 -->
    <delete id="deleteBySql">
        ${sql}
    </delete>

</mapper>