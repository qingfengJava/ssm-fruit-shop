<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义namespace，说明要实现那个Mapper里面的方法-->
<mapper namespace="com.fruit.dao.ManageMapper">

    <!-- 定义实体类与数据库映射字段的关系 -->
    <resultMap id="ResultMapManage" type="com.fruit.po.Manage">
        <!-- 主键字段 -->
        <id property="id" column="id" jdbcType="INTEGER"></id>
        <!-- 非主键字段 -->
        <result property="userName" column="userName" jdbcType="VARCHAR"></result>
        <result property="password" column="password" jdbcType="VARCHAR"></result>
        <result property="realName" column="realName" jdbcType="VARCHAR"></result>
    </resultMap>

    <!-- 声明数据库字段（公共的字段） -->
    <sql id="Manage_field">
        id,userName,password,realName
    </sql>

    <!-- 实体类的属性（公共的字段） -->
    <sql id="Manage_insert">
        #{id},#{userName},#{password},#{realName}
    </sql>
    
    <!-- 查询时的条件（公共的字段） -->
    <sql id="Manage_where">
        <if test="id != null">
            and id = #{id}
        </if>
        <if test="userName != null">
            and userName = #{userName}
        </if>
        <if test="password != null">
            and password = #{password}
        </if>
        <if test="realName != null">
            and realName = #{realName}
        </if>
    </sql>

    <!-- 更新时的条件（公共的字段） -->
    <sql id="Manage_update">
        <if test="userName != null">
            userName = #{userName},
        </if>
        <if test="password != null">
            password = #{password},
        </if>
        <if test="realName != null">
            realName = #{realName}
        </if>
    </sql>

    <!-- 新增
         参数: 实体类
         返回： 主键-->
    <insert id="insert0" parameterType="com.fruit.po.Manage" useGeneratedKeys="true" keyProperty="id">
        insert into manage(
        <include refid="Manage_field"></include>
        ) values(
        <include refid="Manage_insert"></include>
        )
    </insert>

    <!-- 根据实体主键删除一个实体 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from manage where id=#{id}
    </delete>

    <!-- 通过实体删除 -->
    <delete id="deleteByEntity" parameterType="com.fruit.po.Manage">
        delete from manage where 1=1
        <include refid="Manage_where"></include>
    </delete>

    <!-- 通过Map删除 -->
    <delete id="deleteByMap" parameterType="java.util.HashMap">
        delete from manage where 1=1
        <include refid="Manage_where"></include>
    </delete>

    <!-- 更新一个实体 -->
    <update id="update" parameterType="com.fruit.po.Manage">
        update manage
        <set>
            <include refid="Manage_update"></include>
        </set>
        where 1=1
            <include refid="Manage_where"></include>
    </update>

    <!-- 通过id进行修改 -->
    <update id="updateById" parameterType="com.fruit.po.Manage">
        update manage
        <set>
            <include refid="Manage_update"></include>
        </set>
        where id=#{id}
    </update>

    <!-- 根据参数查询 -->
    <select id="listByMap" resultMap="ResultMapManage" parameterType="map">
        select <include refid="Manage_field"></include> 
        from manage where 1=1 
        <include refid="Manage_where"></include>
    </select>

    <!-- 查询整个表 -->
    <select id="listAll" resultMap="ResultMapManage">
        select <include refid="Manage_field"></include>
        from manage
    </select>

    <!-- 查询所有实体，根据实体属性值为判断条件查询所有实体 -->
    <select id="listAllByEntity" resultMap="ResultMapManage" parameterType="com.fruit.po.Manage">
        select <include refid="Manage_field"></include>
        from manage where 1=1
        <include refid="Manage_where"></include>
    </select>

    <!-- 根据主键获取一个实体 -->
    <select id="load" resultMap="ResultMapManage" parameterType="java.lang.Integer">
        select <include refid="Manage_field"></include>
        from manage where id=#{id}
    </select>

    <!-- 根据主键获取一个实体 -->
    <select id="getById" resultMap="ResultMapManage" parameterType="java.lang.Integer">
        select <include refid="Manage_field"></include>
        from manage where id=#{id}
    </select>

    <!-- 通过map查询 -->
    <select id="getByMap" resultMap="ResultMapManage" parameterType="map">
        select <include refid="Manage_field"></include>
        from manage where 1=1
        <include refid="Manage_where"></include>
    </select>

    <!--通过对象查询不分页 -->
    <select id="getByEntity" resultMap="ResultMapManage" parameterType="com.fruit.po.Manage">
        select <include refid="Manage_field"></include>
        from manage where 1=1
        <include refid="Manage_where"></include>
    </select>

    <!-- 通过map查询分页 -->
    <select id="findByMap" resultMap="ResultMapManage" parameterType="map">
        select <include refid="Manage_field"></include> 
        from manage where 1=1 
        <include refid="Manage_where"></include>
    </select>
    
    <!--通过对象查询分页 -->
    <select id="findByEntity" resultMap="ResultMapManage" parameterType="com.fruit.po.Manage">
        select <include refid="Manage_field"></include>
        from manage where 1=1 
        <include refid="Manage_where"></include>
    </select>

    <!-- 批量新增 -->
    <insert id="insertBatch" parameterType="java.util.List">
        insert into manage(
        <include refid="Manage_field"></include>
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.userName},#{item.password},#{item.realName})
        </foreach>
    </insert>

    <!-- 批量修改 -->
    <update id="updateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator=";">
            update manage
            <set>
                <if test="item.userName != null">
                    userName = #{item.userName},
                </if>
                <if test="item.password != null">
                    password = #{item.password},
                </if>
                <if test="item.realName != null">
                    realName = #{item.realName}
                </if>
            </set>
            where 1=1
            <if test="item.id != null">
                and id = #{item.id}
            </if>
        </foreach>
    </update>

    <!-- ==================封装纯sql语法==================== -->
    <!-- 查询一个对象，返回map -->
    <select id="getBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询一个对象返回一个实体类 -->
    <select id="getBySqlReturnEntity" resultMap="ResultMapManage">
        ${sql}
    </select>

    <!-- 查询列表返回map -->
    <select id="listBySqlReturnMap" resultType="map">
        ${sql}
    </select>

    <!-- 查询列表返回实体 -->
    <select id="listBySqlReturnEntity" resultMap="ResultMapManage">
        ${sql}
    </select>

    <!-- 查询分页 -->
    <select id="findBySqlRerturnEntity" resultMap="ResultMapManage">
        ${sql}
    </select>

    <!-- 通过SQL修改 -->
    <update id="updateBysql">
        ${sql}
    </update>

    <!-- 通过SQL删除 -->
    <delete id="deleteBySql">
        ${sql}
    </delete>

<!--        List<ItemCategory> testList(@Param("sql") String sql);-->
    <select id="testList" resultMap="test" parameterType="string">
        ${sql}
    </select>

    <!-- 定义实体类与数据库映射字段的关系 -->
    <resultMap id="test" type="com.fruit.po.ItemCategory">
        <!-- 主键字段 -->
        <id property="id" column="id" jdbcType="INTEGER"></id>
        <!-- 非主键字段 -->
        <result property="name" column="name" jdbcType="VARCHAR"></result>
        <result property="pid" column="pid" jdbcType="INTEGER"></result>
        <result property="isDelete" column="isDelete" jdbcType="INTEGER"></result>
    </resultMap>

</mapper>